# Discord Configuration
DISCORD_TOKEN=your_discord_bot_token_here
COMMAND_PREFIX=!

# Ollama Configuration
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=llama3.2
# For roleplay models like L3-8B-Stheno, use higher temperature (1.12-1.22)
OLLAMA_TEMPERATURE=1.17
OLLAMA_MAX_TOKENS=500
# Advanced sampling for roleplay models
OLLAMA_MIN_P=0.075
OLLAMA_TOP_K=50
OLLAMA_REPEAT_PENALTY=1.1

# Chat Settings
CHAT_HISTORY_ENABLED=true
CHAT_HISTORY_MAX_MESSAGES=20
AUTO_REPLY_ENABLED=false
# Comma-separated channel IDs (leave empty to allow all channels)
AUTO_REPLY_CHANNELS=
# Also speak responses in voice channel if bot is connected
AUTO_REPLY_WITH_VOICE=true
# Conversation session timeout in seconds (default: 300 = 5 minutes)
# Once started with @mention or /chat, bot responds to all messages until timeout
CONVERSATION_TIMEOUT=300

# System Prompt / Bot Personality
# Choose a personality: default, friendly, professional, gaming, pirate
# Or create your own in prompts/your_name.txt
SYSTEM_PROMPT_FILE=./prompts/default.txt
# Or set directly (takes precedence over file):
SYSTEM_PROMPT=

# RAG (Retrieval-Augmented Generation)
# Give your bot knowledge from documents (.txt, .md files)
# Place documents in data/documents/ and enable RAG
RAG_ENABLED=false
RAG_DOCUMENTS_PATH=./data/documents
RAG_VECTOR_STORE=./data/vector_store
RAG_TOP_K=3  # Number of relevant documents to retrieve

# MCP (Model Context Protocol)
# Connect to external tools and APIs
# Requires an MCP server running (see services/mcp.py for example)
MCP_ENABLED=false
MCP_SERVER_URL=http://localhost:8080

USER_PROFILES_ENABLED=true
USER_PROFILES_PATH=./data/user_profiles
# AI-powered automatic learning from conversations (extracts traits, interests, facts)
USER_PROFILES_AUTO_LEARN=true
# Affection system: bot develops relationships based on interaction frequency
USER_AFFECTION_ENABLED=true
# Include user profiles in AI context (bot knows who users are)
USER_CONTEXT_IN_CHAT=true

# Web Search
# Allow bot to search the internet for context and information
WEB_SEARCH_ENABLED=false
WEB_SEARCH_ENGINE=duckduckgo  # duckduckgo or google
WEB_SEARCH_MAX_RESULTS=3

# Voice/TTS Settings
# TTS Engine: "edge" (cloud-based) or "kokoro" (local, high quality)
TTS_ENGINE=kokoro

# Edge TTS Settings (when TTS_ENGINE=edge)
DEFAULT_TTS_VOICE=en-US-AriaNeural
TTS_RATE=+0%
TTS_VOLUME=+0%

# Kokoro TTS Settings (when TTS_ENGINE=kokoro)
# Available voices: am_adam, am_eric, am_liam, am_michael, am_onyx (US male)
#                  bm_george, bm_lewis, bm_daniel (British male)
#                  af_sarah, af_nova, bf_alice (and many more female voices)
# Run: python -c "from kokoro_onnx import Kokoro; k=Kokoro('kokoro-v1.0.onnx','voices-v1.0.bin'); print('\n'.join(k.get_voices()))"
KOKORO_VOICE=am_adam
KOKORO_SPEED=1.0

# Character-specific voices (for Arby n the Chief or multiple personalities)
KOKORO_VOICE_CHIEF=am_onyx
KOKORO_VOICE_ARBY=bm_george

# RVC Settings (Voice Conversion via RVC-WebUI)
RVC_ENABLED=true
RVC_MODE=webui
RVC_WEBUI_URL=http://localhost:7865
DEFAULT_RVC_MODEL=GOTHMOMMY

# Audio Settings
AUDIO_BITRATE=96
AUDIO_SAMPLE_RATE=48000
